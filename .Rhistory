# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
tree_current <- vector("numeric", max_game)
max_game = 1e5
tree = 10
# Set the "starting" variables for the game
tree_current <- tree
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
tree_current <- tree[1]
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
# Function that simulates a "turn" in the game hi ho cherry-o.
# Arguments:
# tree - the current number of cherries on the tree
# basket - the current number of cherries in the basket
# Returns:
# - The number of cherries left on the tree after the turn
spinner <- function(tree, basket, spincount = FALSE) {
bird_dog <- -min( c(2, basket) )
move <- sample(c(1:4, rep(bird_dog, 2), -basket), size = 1)
left <- tree - move
max(left, 0)
}
# Function to play hi-ho cherry-o by yourself (which, in normal circumstances
# would be lame).
# Arguments:
# - tree - the total number of cherries on the tree at the start of the game
# - max_play - since the game can technically go on forever, select the maximum
#              number of turns allowed. Default value is 1e5.
play_game <- function(tree, max_game = 1e5) {
if(!is.numeric(tree)) stop(paste("tree must be numeric, not", class(tree)))
if(tree %% 1 != 0){
warning("Decimal value detected for tree input, coercing to integer")
tree <- as.integer(tree)
}
if(tree > 50){
message("You are crazy for wanting to play the game with such a large
cherry tree!")
}
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
tree_current <- tree[1]
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
# BONUS: Add warning statement if game finished to complete.
if(i == max_game){
warning("Game not finished before max_game reached")
}
game_moves <- diff(tree_current[seq_len(i + 1)])
# Return the number of iterations it took to finish the game.
i
}
game_moves
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
tree_current <- tree[1]
basket <- 0
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
game_moves <- diff(tree_current[seq_len(i + 1)])
game_moves
tree_current
# Function that simulates a "turn" in the game hi ho cherry-o.
# Arguments:
# tree - the current number of cherries on the tree
# basket - the current number of cherries in the basket
# Returns:
# - The number of cherries left on the tree after the turn
spinner <- function(tree, basket, spincount = FALSE) {
bird_dog <- -min( c(2, basket) )
move <- sample(c(1:4, rep(bird_dog, 2), -basket), size = 1)
left <- tree - move
max(left, 0)
}
tree <- 10
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
max_game = 1e5
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
tree_current[1] <- tree
basket <- 0
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
game_moves <- diff(tree_current[seq_len(i + 1)])
tree_current[seq_len(i + 1)]
# Function that simulates a "turn" in the game hi ho cherry-o.
# Arguments:
# tree - the current number of cherries on the tree
# basket - the current number of cherries in the basket
# Returns:
# - The number of cherries left on the tree after the turn
spinner <- function(tree, basket, spincount = FALSE) {
bird_dog <- -min( c(2, basket) )
move <- sample(c(1:4, rep(bird_dog, 2), -basket), size = 1)
left <- tree - move
max(left, 0)
}
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
tree_current[1] <- tree
basket <- 0
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current[i + 1]
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
tree_current
tree_current[1:i]
game_moves <- diff(tree_current[seq_len(i + 1)])
game_moves
# Function to create the cherry class.
# Arguments:
# x - the number of spins it takes to finish the game.
# bird_dog - the number of bird or dog spins
# bucket - the number of bucket spins
# ones - the number of "one" spins
# twos - the number of "two" spins
# threes - the number of "three" spins
# fours - the number of "four" spins
as_cherry <- function(x, tree, game_diff){
structure(x,
tree = tree,
game_diff = game_diff,
class = "cherry")
}
# Function to play hi-ho cherry-o by yourself (which, in normal circumstances
# would be lame).
# Arguments:
# - tree - the total number of cherries on the tree at the start of the game
# - max_play - since the game can technically go on forever, select the maximum
#              number of turns allowed. Default value is 1e5.
play_game <- function(tree, max_game = 1e5) {
if(!is.numeric(tree)) stop(paste("tree must be numeric, not", class(tree)))
if(tree %% 1 != 0){
warning("Decimal value detected for tree input, coercing to integer")
tree <- as.integer(tree)
}
if(tree > 50){
message("You are crazy for wanting to play the game with such a large
cherry tree!")
}
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
tree_current[1] <- tree
basket <- 0
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current[i + 1]
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
# BONUS: Add warning statement if game finished to complete.
if(i == max_game){
warning("Game not finished before max_game reached")
}
game_moves <- diff(tree_current[seq_len(i + 1)])
# Return the number of iterations it took to finish the game.
as_cherry(i)
}
temp <- play_game(10)
# Function to play hi-ho cherry-o by yourself (which, in normal circumstances
# would be lame).
# Arguments:
# - tree - the total number of cherries on the tree at the start of the game
# - max_play - since the game can technically go on forever, select the maximum
#              number of turns allowed. Default value is 1e5.
play_game <- function(tree, max_game = 1e5) {
if(!is.numeric(tree)) stop(paste("tree must be numeric, not", class(tree)))
if(tree %% 1 != 0){
warning("Decimal value detected for tree input, coercing to integer")
tree <- as.integer(tree)
}
if(tree > 50){
message("You are crazy for wanting to play the game with such a large
cherry tree!")
}
# Set the "starting" variables for the game
tree_current <- vector("numeric", max_game + 1)
tree_current[1] <- tree
basket <- 0
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
# Use +1 since the initial grid is stored in index 1
tree_current[i + 1] <- spinner(tree_current[i], basket)
basket <- tree - tree_current[i + 1]
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current[i + 1] < 0.0001){
break
}
}
# BONUS: Add warning statement if game finished to complete.
if(i == max_game){
warning("Game not finished before max_game reached")
}
game_moves <- diff(tree_current[seq_len(i + 1)])
# Return the number of iterations it took to finish the game.
as_cherry(i, tree = tree, game_diff = game_moves)
}
play_game(10)
library(devtools)
document()
document()
devtools::load_all(".")
temp <- play_game(10)
class(temp)
attr(temp, "tree")
temp + 2
temp
as.numeric(temp)
?plot
run <- attr(x, "tree") + cumsum(attr(x, "game_diff"))
run <- attr(temp, "tree") + cumsum(attr(temp, "game_diff"))
run
document()
devtools::load_all(".")
x <- play_game(10)
plot(x)
devtools::load_all(".")
x <- play_game(10)
plot(x)
x <- play_game(10)
x
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
devtools::load_all(".")
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
x <- play_game(10)
plot(x)
devtools::load_all(".")
x <- play_game(10)
plot(x)
?sample
?cumsum
?summary
?mean
?rnorm
?solve
?model.matrix
usethis::use_test("play_game")
# Create a set of "starting points" for the spinner.
start <- sample(1:10, size = 100, replace = TRUE)
spinner_store <- vector("numeric", length(start))
devtools::load_all(".")
tree_size <- sample(5:30, 1)
tree_size <- sample(5:30, 1)
# Create a set of "starting points" for the spinner.
start <- sample(1:tree_size, size = 100, replace = TRUE)
spinner_store <- vector("numeric", length(start))
for(i in seq_len(length(start))){
spinner_store[i] <- spinner(start, tree_size - start)
}
tree_size
spinner_store
tree_size <- sample(5:30, 1)
# Create a set of "starting points" for the spinner.
start <- sample(1:tree_size, size = 100, replace = TRUE)
spinner_store <- vector("numeric", length(start))
for(i in seq_len(length(start))){
spinner_store[i] <- spinner(start, tree_size - start)
}
start
tree_size - start
tree_size <- sample(5:30, 1)
# Create a set of "starting points" for the spinner.
start <- sample(1:tree_size, size = 100, replace = TRUE)
spinner_store <- vector("numeric", length(start))
spinner(start[1], tree_size - start[1])
start[1]
tree_size <- sample(5:30, 1)
# Create a set of "starting points" for the spinner.
start <- sample(1:tree_size, size = 100, replace = TRUE)
spinner_store <- vector("numeric", length(start))
for(i in seq_len(length(start))){
spinner_store[i] <- spinner(start, tree_size - start)
}
tree_size
summary(spinner_store)
summary(start)
summary(tree_size - start)
# Function that simulates a "turn" in the game hi ho cherry-o.
# Arguments:
# tree - the current number of cherries on the tree
# basket - the current number of cherries in the basket
# Returns:
# - The number of cherries left on the tree after the turn
spinner <- function(tree, basket) {
bird_dog <- -min( c(2, basket) )
move <- sample(c(1:4, rep(bird_dog, 2), -basket), size = 1)
left <- tree - move
max(left, 0)
}
# Function to play hi-ho cherry-o by yourself (which, in normal circumstances
# would be lame).
# Arguments:
# - tree - the total number of cherries on the tree at the start of the game
# - max_play - since the game can technically go on forever, select the maximum
#              number of turns allowed. Default value is 1e5.
play_game <- function(tree, max_game = 1e5) {
# Set the "starting" variables for the game
tree_current <- tree
basket <- 0
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
tree_current <- spinner(tree_current, basket)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current < 0.0001){
break
}
}
# Return the number of iterations it took to finish the game.
i
}
# Now, use the replicate function to play the game with 10 cherries on the
# tree 100 times and report the max number of iterations.
plays_10 <- replicate(100, play_game(10))
summary(plays_10)
# Same for 20.
plays_20 <- replicate(100, play_game(20))
summary(plays_20)
# Function that simulates a "turn" in the game hi ho cherry-o.
# Arguments:
# tree - the current number of cherries on the tree
# basket - the current number of cherries in the basket
# Returns:
# - The number of cherries left on the tree after the turn
spinner <- function(tree, basket) {
bird_dog <- -min( c(2, basket) )
move <- sample(c(1:4, rep(bird_dog, 2), -basket), size = 1)
left <- tree - move
max(left, 0)
}
# Function to play hi-ho cherry-o by yourself (which, in normal circumstances
# would be lame).
# Arguments:
# - tree - the total number of cherries on the tree at the start of the game
# - max_play - since the game can technically go on forever, select the maximum
#              number of turns allowed. Default value is 1e5.
play_game <- function(tree, max_game = 1e5) {
# Set the "starting" variables for the game
tree_current <- tree
basket <- 0
# Now, play the game. Write a conditional statement that suspends the loop
# once the number of cherries on the tree drops to zero.
for(i in seq_len(max_game)) {
tree_current <- spinner(tree_current, basket)
print(tree_current)
basket <- tree - tree_current
# Use < instead of == to avoid any numerical precision issues around 0.
if(tree_current < 0.0001){
break
}
}
# Return the number of iterations it took to finish the game.
i
}
# Now, use the replicate function to play the game with 10 cherries on the
# tree 100 times and report the max number of iterations.
plays_10 <- replicate(100, play_game(10))
summary(plays_10)
# Same for 20.
plays_20 <- replicate(100, play_game(20))
summary(plays_20)
# Now, use the replicate function to play the game with 10 cherries on the
# tree 100 times and report the max number of iterations.
plays_10 <- replicate(100, play_game(10))
start
tree_start
tree_size <- sample(5:30, 1)
# Create a set of "starting points" for the spinner.
tree_start <- sample(1:tree_size, size = 100, replace = TRUE)
spinner_store <- vector("numeric", length(start))
for(i in seq_len(length(tree_start))){
spinner_store[i] <- spinner(tree_start, tree_size - tree_start)
}
tree_size
tree_start[1]
tree_size - tree_start
usethis::use_test("play_game")
devtools::test()
?expect_message
# Idea for "quietly" functional from:
# https://stackoverflow.com/questions/66547934/how-to-mute-messages-and-warnings-with-testthat-when-they-are-expected
play_quiet <- purrr::quietly(play_game)
# Idea for "quietly" functional from:
# https://stackoverflow.com/questions/66547934/how-to-mute-messages-and-warnings-with-testthat-when-they-are-expected
play_quiet <- purrr::quietly(cherryr::play_game)
devtools::load_all(".")
# Idea for "quietly" functional from:
# https://stackoverflow.com/questions/66547934/how-to-mute-messages-and-warnings-with-testthat-when-they-are-expected
play_quiet <- purrr::quietly(play_game)
regexpr(play_catch$message, "You are crazy")
# Idea for "quietly" functional from:
# https://stackoverflow.com/questions/66547934/how-to-mute-messages-and-warnings-with-testthat-when-they-are-expected
play_quiet <- purrr::quietly(play_game)
play_catch <- play_quiet(51, max_game = 5)
regexpr(play_catch$message, "You are crazy")
play_catch$messages
regexpr(play_catch$messages, "You are crazy")
play_catch$messages
?regexpr
regexpr(pattern = "You are crazy", play_catch$messages)
play_catch$warnings
tree <- sample(5:15, size = 1)
result <- play_game(tree)
result
devtools::test()
# Idea for "quietly" functional from:
# https://stackoverflow.com/questions/66547934/how-to-mute-messages-and-warnings-with-testthat-when-they-are-expected
play_quiet <- purrr::quietly(play_game)
play_catch <- play_quiet(51, max_game = 5)
play_catch
devtools::test()
